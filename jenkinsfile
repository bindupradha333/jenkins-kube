// codectl version : 1.4.7


pipeline {
    /* In this step, you can define where your job can run.
    
     * In more advanced usages, you can have the entire build be run inside of a Docker containers
     * in order to use custom tools not natively supported by Jenkins.
    
     */
    agent any
    
    /* The tools this pipeline needs are defined here. The available versions are the same as those
     * available in maven or freestyle job.
     */
    
	environment {
	    
		DOCKER_HUB_CREDENTIALS = "./DOCKER_HUB_CREDENTIALS"
		DOCKER_HUB_USERNAME = "./DOCKER_HUB_USERNAME"
		DOCKER_HUB_PASSWORD = "./DOCKER_HUB_PASSWORD"
		
    }
    
       
    
    


     stages {
    stage('Clone repository') {
      steps {
        git 'https://github.com/bindupradha333/jenkins-kube'
      }
    }
		
		/* In this stage, the code is being built/compiled, and the Docker image is being created and tagged.
         * Tests shouldn't been run in this stage, in order to speed up time to deployment.
         */
		
        stage ('MVN Build') {
          	steps {
				
				
				
				// Run the docker build command and tag the image with the git commit ID
				 sh 'mvn clean install'
				 sh 'docker build -t taniaduggal60/shopfront:latest .'
				 sh 'docker build -t taniaduggal60/productcatalogue:latest .'
				 sh 'docker build -t taniaduggal60/stockmanager:latest .'
				
            }

        }

        
        /* In this stage, built images are being pushed
        */
		
        stage ('Push') {
            steps {
             withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
              sh 'docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD'
              sh 'docker push $DOCKER_IMAGE_NAME'
                
            }
        }     


        /* In this stage, we're running several different sub-stages in parallel. This speeds up job time by running many different
         * steps (that don't necessarily need to be run in sequence) at the same time, speeding up your job runtime.
         */
      		stage ('Deployment') {
            // Run these stages in parallel
            stage('Deploy to Kubernetes') {
      environment {
        KUBECONFIG = '/path/to/kubeconfig'
      }
      steps {
        sh 'kubectl apply -f deployment.yaml'
        sh 'kubectl apply -f service.yaml'
      }
    }
                 stage ('Test/Sonar') {
					steps {
					    
						echo 'Starting SonarQube scan...'

						// Run your unit tests and prepare SonarQube output
						 
						sonarScan(sonarServer: 'Sonar', properties:'''
                            				mvn clean verify sonarsonar 
                                           -Dsonar.projectKey=product-catalogue 
                                           -Dsonar.projectName='product-catalogue' 
                                           -Dsonar.host.url=httplocalhost9000 
                                           -Dsonar.token=squ_6e793deb037a905a6a6f0d842162d6fea059f4a3
                                            sonar.jacoco.reportPaths=target/jacoco.exec
                                            sonar.core.codeCoveragePlugin=jacoco
											sonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco-ut/jacoco.xml
											

                        			''')

						// This step will pause the pipeline and wait for the Sonar analysis to complete and return quality gate status.
						// The pipeline will fail if the quality gate stauts is not green
						timeout(time: 1, unit: 'HOURS') {
							script {
								def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
								if (qg.status != 'OK') {
									echo "Quality gate failed"
									error "Pipeline aborted due to quality gate failure: ${qg.status}"
								}
							}
						}
                    }
					// Make test results visible in Jenkins UI if the install step completed successfully
					
                


                /*stage ('Deploy') {
                    when { branch "master/*" }
                    
                }*/
				}             

                
            }
        }
    }
    
}